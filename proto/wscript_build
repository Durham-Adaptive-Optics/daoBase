#! /usr/bin/env python
import os, platform
from waflib.Task import Task, Logs

# additional_flags
add_ld_flags = ['']
add_c_flags  = ['']
add_cxx_flags= ['']

if platform.system() == "Darwin":
    add_ld_flags += ['-L/opt/homebrew/lib']
    add_cxx_flags += ['-std=c++17']
    add_c_flags += ['']
elif platform.system() == "Windows":
    add_cxx_flags += ['']
    add_c_flags +=  ['']
else:
    add_ld_flags += ['']
    add_cxx_flags += ['']
    add_c_flags +=  ['']

class proto_cpp(Task):
    name = 'proto_cpp'
    def run(self):
        output_folder = self.outputs[0].abspath()
        input_file = self.inputs[1].abspath()
        if platform.system() == "Windows":
            return self.exec_command(f'protoc -I{self.inputs[0]} --cpp_out=dllexport_decl=DLL_EXPORT:{output_folder} {input_file}')
        else:
            return self.exec_command(f'protoc -I{self.inputs[0]} --cpp_out={output_folder} {input_file}')

class proto_py(Task):
    name = 'proto_py'
    def run(self):
        output_folder = self.outputs[0].abspath()
        input_file = self.inputs[1].abspath()
        return self.exec_command(f'protoc -I{self.inputs[0]} --python_out={output_folder} {input_file}')

def build_proto_list(bld, list, proto_path='../../proto/', build_path='../'):
    print(f"Building proto files: {list}")
    Rebuild = False
    for i in list:
        input_file = os.path.join(os.path.join(os.getcwd(), 'proto'), i)
        output_file = os.path.join(os.path.join(os.getcwd(), 'build'), os.path.basename(input_file).replace('.proto', '.pb.cc'))
        if os.path.exists(output_file) and os.path.getmtime(output_file) > os.path.getmtime(input_file):
            pass
            # Logs.info(f"Skipping build for {output_file}, it is up-to-date.")
        else:
            Rebuild = True
        input_file = os.path.join(os.path.join(os.getcwd(), 'proto'), i)
        output_file = os.path.join(os.path.join(os.getcwd(), 'build'), os.path.basename(input_file).replace('.proto', '_pb2.py'))
        if os.path.exists(output_file) and os.path.getmtime(output_file) > os.path.getmtime(input_file):
            pass
            # Logs.info(f"Skipping build for {output_file}, it is up-to-date.")
        else:
            Rebuild=True


    for i in list:
        if Rebuild:
            cpp = proto_cpp(env=bld.env)
            cpp.set_inputs([bld.path.find_or_declare(proto_path),bld.path.find_or_declare(proto_path + i)])
            cpp.set_outputs(bld.path.find_or_declare(build_path))
            bld.add_to_group(cpp) 

            py = proto_py(env=bld.env)
            py.set_inputs([bld.path.find_or_declare(proto_path),bld.path.find_or_declare(proto_path + i)])
            py.set_outputs(bld.path.find_or_declare(build_path))
            bld.add_to_group(py)
        bld.execute_build()
    return bld

def build(bld):
    # List of .proto files
    proto_files = ['daoCommand.proto', 'daoLogging.proto', 'daoEvent.proto', 'daoFileServer.proto']
    
    # Compile Protobuf files
    build_proto_list(bld, proto_files)

    if platform.system() == "Windows":
        bld.shlib(
            target='daoProto',
            source=[f"{bld.path.find_or_declare('../build/' + proto.replace('.proto', '.pb.cc')).abspath()}" for proto in proto_files],
            libs=['libprotobuf'],  # Adjust if Protobuf has a different library name on your system
            cppflags=['/std:c++14', '/DDLL_EXPORT=__declspec(dllexport)'],
            features='cxx cxxshlib',
        )
    else:
        bld.shlib(
            target='daoProto',
            source=[f"{bld.path.find_or_declare('../build/' + proto.replace('.proto', '.pb.cc')).abspath()}" for proto in proto_files],
            libs=['protobuf'],  # Common name for Protobuf on Unix systems
            cppflags=['-std=c++11'],
            features='cxx cxxshlib',
        )

if platform.system() != "Windows":
    bld = build_proto_list(bld, ['daoCommand.proto', 'daoLogging.proto', 'daoEvent.proto','daoFileServer.proto'])
    bld.shlib(
        target='daoProto',
        source= ["../build/daoCommand.pb.cc", "../build/daoLogging.pb.cc", "../build/daoEvent.pb.cc"],
        cppflags=[''] + add_cxx_flags,
        use=['PROTOBUF'],
        features    = 'pkg_build',
    )