#! /usr/bin/env python
import os, platform
from waflib.Task import Task


class proto_cpp(Task):
    name =  'proto_cpp'
    def run(self):
        if platform.system() == "Windows":
            return self.exec_command(f'protoc -I{self.inputs[0]} --cpp_out=dllexport_decl=DLL_EXPORT:{self.outputs[0]} {self.inputs[1]}')
        else:
            return self.exec_command(f'protoc -I{self.inputs[0]} --cpp_out={self.outputs[0]} {self.inputs[1]}')

class proto_py(Task):
    name='proto_py'
    def run(self):
        return self.exec_command(f'protoc -I{self.inputs[0]} --python_out={self.outputs[0]} {self.inputs[1]}')

def build_proto_list(bld, list, proto_path='../../proto/', build_path='../'):
    for i in list:
        cpp = proto_cpp(env=bld.env)
        cpp.set_inputs([bld.path.find_or_declare(proto_path),bld.path.find_or_declare(proto_path + i)])
        cpp.set_outputs(bld.path.find_or_declare(build_path))
        bld.add_to_group(cpp) 

        py = proto_py(env=bld.env)
        py.set_inputs([bld.path.find_or_declare(proto_path),bld.path.find_or_declare(proto_path + i)])
        py.set_outputs(bld.path.find_or_declare(build_path))
        bld.add_to_group(py)
    bld.execute_build()
    return bld

def build(bld):
    # List of .proto files
    proto_files = ['daoCommand.proto', 'daoLogging.proto', 'daoEvent.proto']
    
    # Compile Protobuf files
    build_proto_list(bld, proto_files)

    if platform.system() == "Windows":
        bld.shlib(
            target='daoProto',
            source=[f"{bld.path.find_or_declare('../build/' + proto.replace('.proto', '.pb.cc')).abspath()}" for proto in proto_files],
            libs=['libprotobuf'],  # Adjust if Protobuf has a different library name on your system
            cppflags=['/std:c++14', '/DDLL_EXPORT=__declspec(dllexport)'],
            features='cxx cxxshlib',
        )
    else:
        bld.shlib(
            target='daoProto',
            source=[f"{bld.path.find_or_declare('../build/' + proto.replace('.proto', '.pb.cc')).abspath()}" for proto in proto_files],
            libs=['protobuf'],  # Common name for Protobuf on Unix systems
            cppflags=['-std=c++11'],
            features='cxx cxxshlib',
        )

if platform.system() != "Windows":
    bld = build_proto_list(bld, ['daoCommand.proto', 'daoLogging.proto', 'daoEvent.proto'])
    bld.shlib(
        target='daoProto',
        source= ["../build/daoCommand.pb.cc", "../build/daoLogging.pb.cc", "../build/daoEvent.pb.cc"],
        cppflags=['-std=c++11'],
        use=['PROTOBUF'],
        features    = 'pkg_build',
    )