# ======================================
#  @brief  DAO Build Script
#  @author Thomas Davies
#  @date   2024-11-05 
#**********************************************/
# ======================================

# todo: execute_process calls get run when we invoke cmake. As these are
# used to build things, we should create targets so they run on cmake --build instead.

cmake_minimum_required(VERSION 3.4) # todo: require what min version?
project(DAO)

# ====================================================
#             Directory Configuration
# ====================================================
set(ROOT "${CMAKE_SOURCE_DIR}")
set(INCLUDES_DIR "${ROOT}/include")
set(BUILD_DIR "${ROOT}/build")
set(PROTOSRC_DIR "${ROOT}/proto")
set(ProtoHeaders_Dir "${ROOT}/include")
set(ProtoScripts_Dir "${ROOT}/scripts")
set(Bin_Dir "${ROOT}")

include_directories(${INCLUDES_DIR})

# ====================================================
#                    Build Steps
# ====================================================
function(daoProto)
    # Invoke 'Google Protobuffer' compiler on .proto files.
    set(protoFiles 
        "daoCommand.proto"
        "daoEvent.proto"
        "daoLogging.proto"
    )
    execute_process(COMMAND protoc -I${PROTOSRC_DIR} --cpp_out=${BUILD_DIR} --python_out=${BUILD_DIR} ${protoFiles})
    
    # Gather generated C++ source files.
    file(GLOB libSrcs "${BUILD_DIR}/*.pb.cc")

    # ---

    set(compileFlags -std=c++11)
    set(linkFlags)

    # ---

    add_library(daoProto SHARED ${libSrcs})
    target_compile_options(daoProto PRIVATE ${compileFlags})
    target_link_options(daoProto PRIVATE ${linkFlags})

endfunction(daoProto)

function(daoNuma)
    set(sources "${CMAKE_SOURCE_DIR}/src/cpp/daoNuma.cpp")

    set(compileFlags,
        -Ofast 
        -Wall 
        -Wextra 
        # -march=core-avx2 
        # -mavx2
    )
    
    set(linkFlags -lnuma) 

    # ---

    add_library(daoNuma SHARED ${sources})
    target_compile_options(daoNuma PRIVATE ${compileFlags})
    target_link_options(daoNuma PRIVATE ${linkFlags})
    
endfunction(daoNuma)

function(dao)
    set(sources "${CMAKE_SOURCE_DIR}/src/c/dao.c")

    # ---
    
    set(compileFlags,
        # Common flags
        -Ofast 
        -Wall
        -Wextra 
        -pipe
        -fdiagnostics-color=auto 
        -fstack-protector
        
        # Platform-specific flags
        $<$<PLATFORM_ID:Darwin>: -std=c++17>
        $<$<OR:$<PLATFORM_ID:Windows>,$<PLATFORM_ID:Linux>>: -lrt>

        # Build-specific flags
        $<$<CONFIG:ADDSAN>: -g -sanitize=address>
        $<$<CONFIG:DEBUG>: -g>
    )

    set(linkFlags
        # Common flags

        # Platform-specific flags
        $<$<PLATFORM_ID:Darwin>: -L/opt/homebrew/lib>
        $<$<OR:$<PLATFORM_ID:Windows>,$<PLATFORM_ID:Linux>>: -lnuma>

        # Build-specific flags
        $<$<CONFIG:ADDSAN>: -sanitize=address>
    ) 

    # ----

    add_library(dao SHARED ${sources})
    target_compile_options(dao PRIVATE ${compileFlags})
    target_link_options(dao PRIVATE ${linkFlags})

endfunction(dao)

function(installation)
    # Install C++ headers & Python scripts generated by the Protoc compiler.
    file(GLOB pbHeaders "${BUILD_DIR}/*.pb.h")
    file(GLOB pbScripts "${BUILD_DIR}/*.py")
    install(FILES ${pbHeaders} DESTINATION ${ProtoHeaders_Dir})
    install(FILES ${pbScripts} DESTINATION ${ProtoScripts_Dir})

    # Install binaries
    install(TARGETS daoProto DESTINATION ${Bin_Dir})
    install(TARGETS daoNuma DESTINATION ${Bin_Dir})
    install(TARGETS dao DESTINATION ${Bin_Dir})

endfunction(installation)


# ====================================================
#               Generate Build System
# ====================================================
daoProto()
daoNuma()
dao()
installation()